!function(){"use strict";class e{constructor(e,t,s,i,r){this._name=e.name,this._link=e.link,this.id=e._id,this._cardSelector=t,this._data=e,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=r,this._isLiked=e.isLiked}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeBtn=this._cardElement.querySelector(".card__button"),this._trashBtn=this._cardElement.querySelector(".card__trash"),this._likeBtn.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._trashBtn.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}deleteCard(){this._cardElement.remove()}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}_renderLikes(){this._isLiked?this._likeBtn.classList.add("card__button-active"):this._likeBtn.classList.remove("card__button-active")}getView(){return this._element=this._getTemplate(),this._cardImageElement=this._element.querySelector(".card__image"),this._element.querySelector(".card__description").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this._renderLikes(),this._element}}class t{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList,this._formGetReset=t.querySelector("#profile-edit-form")}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return this._inputElementsArray=Array.from(this._inputEls),this._inputElementsArray.some((e=>!e.validity.valid))}toggleButtonstate(){this._hasInvalidInput()?this.disableSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputEls=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonstate()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.toggleButtonstate()}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}}class s{constructor(e){this._popupSelector=e,this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_clickOverlay(e){e.target===this._popupElement&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{this._clickOverlay(e)})),this._closeBtn=this._popupElement.querySelector(".modal__close"),this._closeBtn.addEventListener("click",(()=>{this.close()}))}}class i extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=this._popupForm.querySelectorAll(".modal__input"),this._submitBtn=this._popupElement.querySelector(".modal__save"),this._buttonText=this._submitBtn.textContent}_getInputValues(){return this._inputObj={},this._inputEls.forEach((e=>{this._inputObj[e.id]=e.value})),this._inputObj}reset(){this._popupForm.reset()}setInputValues(e){this._inputEls.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}showUploadingState(){this._submitBtn.innerText="Saving"}showUploaded(){this._submitBtn.innerText=this._buttonText}}class r{constructor(e,t){let{items:s,renderer:i}=e;this._renderedItems=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}addInitialItem(e){this._container.append(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}const n=document.querySelectorAll(".modal__form"),o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",errorList:".modal__error"},a="modal-title-input",l=(document.getElementById(a),"modal-description-input"),d=(document.getElementById(l),"add-card-form"),h="change-profile-pic-form",c="profile-edit-form",u=(document.getElementById(c),"#card-template"),_=document.querySelector("#profile-edit-button"),m=document.querySelector(".profile__add-button"),p={},E=(document.querySelector("#delete-card-modal"),document.querySelectorAll(".card__trash"),document.querySelector("#profile-avatar-edit-button"));let b;document.querySelector("#change-profile-pic-modal"),document.querySelector("#delete-card-modal"),document.querySelector("#delete-card-submit-btn"),document.querySelector(".profile__photo"),document.querySelectorAll(".modal__save");const v=new class extends s{constructor(e){super(e),this._submitBtn=this._popupElement.querySelector(".modal__save"),this._btnText=this._submitBtn.textContent}setSubmitAction(e){this._handleFormSubmit=e}showLoading(){this._submitBtn.innerText="Loading"}showDeleted(){this._submitBtn.innerText=this._btnText}setEventListeners(){super.setEventListeners(),this._submitBtn.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-card-modal"),f=new class extends s{constructor(e){super(e),this._picTitle=this._popupElement.querySelector("#open-pic-title"),this._image=this._popupElement.querySelector("#open-pic-image")}open(e){let{name:t,link:s}=e;this._picTitle.textContent=t,this._image.src=s,this._image.alt=t,super.open()}}("#open-pic-modal"),S=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarEl=document.querySelector(i)}getUserInfo(){return{title:this._nameEl.innerText,description:this._jobEl.innerText}}setUserInfo(e,t){this._nameEl.innerText=e,this._jobEl.innerText=t}setAvatar(e){this._avatarEl.src=e}}({nameSelector:"#js-profile-name",jobSelector:"#js-profile-description",avatarSelector:"#js-avatar"}),g=new i("#profile-add-card-modal",(function(e){const t=e["modal-image-title-input"],s=e["modal-link-input"];g.showUploadingState(),k.addNewCard({cardElementName:t,cardElementLink:s}).then((e=>{g.showUploaded();const t=I(e);b.addItem(t),p[d].disableSubmitButton(),g.close(),g.reset()})).catch((e=>{console.error(e)})).finally((()=>{g.showToUpload()}))})),L=new i("#profile-edit-modal",(function(e){const t=e[a],s=e[l];L.showUploadingState(),k.updateUserInfo({editFormNameInput:t,editFormAboutInput:s}).then((e=>{S.setUserInfo(e.name,e.about),L.close(),p[c].disableSubmitButton(),L.reset()})).catch((e=>{console.error(e)})).finally((()=>{L.showUploaded()}))})),y=new i("#change-profile-pic-modal",(function(e){y.showUploadingState();const t=e["modal-avatar-input"];k.updateProfileImage(t).then((e=>{console.log(e),S.setAvatar(e.avatar),y.close(),p[h].disableSubmitButton(),y.reset()})).catch((e=>{console.error(e)})).finally((()=>{y.showUploaded()}))})),k=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this._headers=s}getResult(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this._headers}).then(this.getResult)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this._headers}).then(this.getResult)}updateUserInfo(e){let{editFormNameInput:t,editFormAboutInput:s}=e;return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this.getResult)}addNewCard(e){let{cardElementName:t,cardElementLink:s}=e;return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this.getResult)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this.getResult)}likeCard(e){return fetch(`${this.baseUrl}/cards/${e.id}/likes`,{method:"PUT",headers:this._headers}).then(this.getResult)}unlikeCard(e){return fetch(`${this.baseUrl}/cards/${e.id}/likes`,{method:"DELETE",headers:this._headers}).then(this.getResult)}updateProfileImage(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this.getResult)}getCardAndUserInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"62fbc1de-42d6-41b7-8bb5-5b0736932e96","Content-Type":"application/json"}});function I(t){return new e(t,u,C,q,B).getView()}function C(e){let{name:t,link:s}=e;f.open({name:t,link:s})}function B(e){(e.isLiked()?k.unlikeCard(e):k.likeCard(e)).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.error(e)}))}function q(e){v.open(),v.setSubmitAction((()=>{v.showLoading(),k.deleteCard(e.id).then((t=>{v.close(),e.deleteCard()})).catch((e=>{console.error(e)})).finally((()=>{v.showDeleted()}))}))}k.getCardAndUserInfo().then((e=>{let[t,s]=e;b=new r({items:t,renderer:e=>{const t=I(e);b.addInitialItem(t)}},".cards__list"),b.renderItems(t);const i=s.name,n=s.about,o=s.avatar;S.setUserInfo(i,n),S.setAvatar(o)})).catch((e=>{console.error(e)})),m.addEventListener("click",(()=>{p[d].resetValidation(),p[d].disableSubmitButton(),g.reset(),g.open()})),_.addEventListener("click",(()=>{p[c].resetValidation(),p[c].disableSubmitButton(),L.reset(),L.open(),function(){const e=S.getUserInfo();L.setInputValues(e)}()})),E.addEventListener("click",(()=>{y.reset(),p[h].resetValidation(),p[h].disableSubmitButton(),y.open()})),(e=>{e.forEach((e=>{const s=new t(o,e);return s.enableValidation(),p[e.getAttribute("id")]=s,p}))})(n),g.setEventListeners(),L.setEventListeners(),f.setEventListeners(),y.setEventListeners(),v.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,