!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this._cardSelector=t,this._data=e,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this.isLiked=e.isLiked}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeBtn=this._cardElement.querySelector(".card__button"),this._trashBtn=this._cardElement.querySelector(".card__trash"),this._likeBtn.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._trashBtn.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}deleteCard(){this._cardElement.remove()}setLikeAction(){this._likeBtn.classList.toggle("card__button-active"),this.isLiked=!this.isLiked}getView(){return this._element=this._getTemplate(),this._cardImageElement=this._element.querySelector(".card__image"),this._element.querySelector(".card__description").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this.isLiked&&this._likeBtn.classList.add("card__button-active"),this._element}}class t{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(){return this._inputElementsArray=Array.from(this._inputEls),this._inputElementsArray.some((e=>!e.validity.valid))}toggleButtonstate(){this._hasInvalidInput()?this.disableSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputEls=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonstate()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.toggleButtonstate()}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0,this._submitButton.innerText="Save"}}class s{constructor(e){this._popupSelector=e,this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_clickOverlay(e){e.target===this._popupElement&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{this._clickOverlay(e)})),this._closeBtn=this._popupElement.querySelector(".modal__close"),this._closeBtn.addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=this._popupForm.querySelectorAll(".modal__input"),this._submitBtn=this._popupElement.querySelector(".modal__save")}_getInputValues(){return this._inputObj={},this._inputEls.forEach((e=>{this._inputObj[e.id]=e.value})),this._inputObj}reset(){this._popupForm.reset()}setInputValues(e){this._inputEls.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}showUploadingState(){this._submitBtn.innerText="Saving"}showUploaded(){this._submitBtn.innerText="Saved"}}class i{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}addInitialItem(e){this._container.append(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}const n=document.querySelectorAll(".modal__form"),o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",errorList:".modal__error"},a="modal-title-input",l=(document.getElementById(a),"modal-description-input"),d=(document.getElementById(l),"#card-template"),c=document.querySelector("#profile-edit-button"),h=document.querySelector(".profile__add-button"),u={},_=(document.querySelector("#delete-card-modal"),document.querySelectorAll(".card__trash"),document.querySelector("#profile-avatar-edit-button")),m=(document.querySelector("#change-profile-pic-modal"),document.querySelector("#delete-card-modal"),document.querySelector("#delete-card-submit-btn"),document.querySelector(".profile__photo"));let p;document.querySelectorAll(".modal__save");const E=new class extends s{constructor(e){super(e),this._submitBtn=this._popupElement.querySelector(".modal__save")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._submitBtn.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-card-modal"),b=new class extends s{constructor(e){super(e),this._picTitle=this._popupElement.querySelector("#open-pic-title"),this._image=this._popupElement.querySelector("#open-pic-image")}open(e){let{name:t,link:s}=e;this._picTitle.textContent=t,this._image.src=s,this._image.alt=t,super.open()}}("#open-pic-modal"),v=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s),this._avatarEl=document.querySelector(r)}getUserInfo(){return{title:this._nameEl.innerText,description:this._jobEl.innerText}}setUserInfo(e,t){this._nameEl.innerText=e,this._jobEl.innerText=t}setAvatar(e){this._avatarEl.src=e}}({nameSelector:"#js-profile-name",jobSelector:"#js-profile-description",avatarSelector:"#js-avatar"}),S=new r("#profile-add-card-modal",(function(e){S.close();const t=e["modal-image-title-input"],s=e["modal-link-input"];S.showUploadingState(),y.addNewCard({cardElementName:t,cardElementLink:s}).then((e=>{S.showUploaded();const t=L(e);p.addItem(t),u["add-card-form"].disableSubmitButton(),S.reset()})).catch((e=>{console.error(e)}))})),f=new r("#profile-edit-modal",(function(e){const t=e[a],s=e[l];f.showUploadingState(),y.updateUserInfo({editFormNameInput:t,editFormAboutInput:s}).then(f.showUploaded()).catch((e=>{console.error(e)})),v.setUserInfo(t,s),f.close(),u["profile-edit-form"].disableSubmitButton(),f.reset()})),g=new r("#change-profile-pic-modal",(function(e){g.showUploadingState();const t=e["modal-avatar-input"];y.updateProfileImage(t).then(g.showUploaded()).catch((e=>{console.error(e)})),m.src=t,g.close(),u["change-profile-pic-form"].disableSubmitButton(),g.reset()})),y=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this._headers=s}getResult(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this._headers}).then(this.getResult)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this._headers}).then(this.getResult)}updateUserInfo(e){let{editFormNameInput:t,editFormAboutInput:s}=e;return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this.getResult)}addNewCard(e){let{cardElementName:t,cardElementLink:s}=e;return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this.getResult)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this.getResult)}likeCard(e){return fetch(`${this.baseUrl}/cards/${e.id}/likes`,{method:"PUT",headers:this._headers}).then(this.getResult).then((e=>{console.log(e)}))}unlikeCard(e){return fetch(`${this.baseUrl}/cards/${e.id}/likes`,{method:"DELETE",headers:this._headers}).then(this.getResult).then((e=>{console.log(e)}))}updateProfileImage(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this.getResult)}getCardAndUserInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"62fbc1de-42d6-41b7-8bb5-5b0736932e96","Content-Type":"application/json"}});function L(t){return new e(t,d,k,C,I).getView()}function k(e){let{name:t,link:s}=e;b.open({name:t,link:s})}function I(e){(e.isLiked?y.unlikeCard(e).catch((e=>{console.error(e)})):y.likeCard(e).catch((e=>{console.error(e)}))).then((t=>{e.setLikeAction()})).catch((e=>{console.error(e)}))}function C(e){E.open(),E.setSubmitAction((()=>{e.deleteCard(),y.deleteCard(e.id).then(E.close()).catch((e=>{console.error(e)}))}))}y.getCardAndUserInfo().then((e=>{let[t,s]=e;p=new i({items:t,renderer:e=>{const t=L(e);p.addInitialItem(t)}},".cards__list"),p.renderItems(t);const r=s.name,n=s.about,o=s.avatar;v.setUserInfo(r,n),v.setAvatar(o)})).catch((e=>{console.error(e)})),h.addEventListener("click",(()=>{S.open()})),c.addEventListener("click",(()=>{f.open(),function(){const e=v.getUserInfo();f.setInputValues(e)}()})),_.addEventListener("click",(()=>{g.open()})),(e=>{e.forEach((e=>{const s=new t(o,e);return s.enableValidation(),u[e.getAttribute("id")]=s,u}))})(n),S.setEventListeners(),f.setEventListeners(),b.setEventListeners(),g.setEventListeners(),E.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,